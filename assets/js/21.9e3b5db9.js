(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{463:function(t,a,s){"use strict";s.r(a);var r=s(2),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"重温以及巩固javascript-变量和类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重温以及巩固javascript-变量和类型"}},[t._v("#")]),t._v(" 重温以及巩固JavaScript----变量和类型")]),t._v(" "),s("h3",{attrs:{id:"一、数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、数据类型"}},[t._v("#")]),t._v(" 一、数据类型")]),t._v(" "),s("p",[t._v("7种基本数据类型：Number  String Boolean  Undefined Null Symbol  BigInt")]),t._v(" "),s("p",[t._v("1种复杂数据类型（引用数据类型）：object")]),t._v(" "),s("h3",{attrs:{id:"二、变量在内存中的具体存储形式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、变量在内存中的具体存储形式"}},[t._v("#")]),t._v(" 二、变量在内存中的具体存储形式")]),t._v(" "),s("h4",{attrs:{id:"变量分为基本类型和引用类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量分为基本类型和引用类型"}},[t._v("#")]),t._v(" 变量分为基本类型和引用类型：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("基本类型是保存在栈内存中的简单数据，他们的值都有固定大小，保存在栈空间，通过按值访问")])]),t._v(" "),s("li",[s("p",[t._v("引用类型是保存在堆内存中的对象，值大小不固定，栈内存中存放的该对象的访问地址指向堆内存中的对象，JavaScript不允许直接访问堆内存中的位置，因此操作对象实际操作对象的引用。")]),t._v(" "),s("p",[t._v("当我们要访问堆内存中的引用数据类型时：")]),t._v(" "),s("ul",[s("li",[t._v("从栈中获取该对象的地址引用")]),t._v(" "),s("li",[t._v("再从堆内存中取得我们需要的数据")])])])]),t._v(" "),s("h4",{attrs:{id:"基本数据类型的复制行为"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型的复制行为"}},[t._v("#")]),t._v(" 基本数据类型的复制行为")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20")]),t._v("\n")])])]),s("p",[t._v("结论：当栈内存中的数据发生复制时，系统会自动为新的变量分配一个新值，最后这些变量都是相互独立互不影响的")]),t._v(" "),s("h4",{attrs:{id:"引用数据类型的复制行为"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型的复制行为"}},[t._v("#")]),t._v(" 引用数据类型的复制行为")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n")])])]),s("p",[t._v("结论：")]),t._v(" "),s("ul",[s("li",[t._v("引用类型的复制，同样是给新的变量b分配一个新值，保存在栈内存中，不同的是，这个值仅仅是引用类型的一个地址指针")]),t._v(" "),s("li",[t._v("他们两个指向同一个值（堆内存），也就是地址指针相同，在堆内存中访问到的具体对象实际上是同一个")]),t._v(" "),s("li",[t._v("因此改变了b.x时，a.x也发生了变化")])]),t._v(" "),s("h3",{attrs:{id:"三、内置对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、内置对象"}},[t._v("#")]),t._v(" 三、内置对象")]),t._v(" "),s("h4",{attrs:{id:"js中内置函数-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js中内置函数-对象"}},[t._v("#")]),t._v(" js中内置函数（对象）")]),t._v(" "),s("p",[t._v("String()、Number()、Boolean()、RegExp()、Date()、Error()、Array()、Function()、Object()、symbol();")])])}),[],!1,null,null,null);a.default=n.exports}}]);